/*
 * axxell-api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.cinaq.axxell.client.api;

import com.cinaq.axxell.client.ApiException;
import com.cinaq.axxell.client.model.DataPoint;
import com.cinaq.axxell.client.model.ErrorResponse;
import com.cinaq.axxell.client.model.Item;
import com.cinaq.axxell.client.model.Store;
import com.cinaq.axxell.client.model.Event;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * Return list of counts per event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aggregateCountEventsTest() throws ApiException {
        String storeid = null;
        String eventType = null;
        String dataPeriod = null;
        // DataPoint response = api.aggregateCountEvents(storeid, eventType, dataPeriod);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return list of aggregated data points correlated with recommendationa and eventType
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aggregateEffectiveTest() throws ApiException {
        String storeid = null;
        String eventType = null;
        // List<DataPoint> response = api.aggregateEffective(storeid, eventType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return list of aggregated data points
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aggregateEventsTest() throws ApiException {
        String storeid = null;
        String eventType = null;
        // List<DataPoint> response = api.aggregateEvents(storeid, eventType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns recent products
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aggregateRecentTest() throws ApiException {
        String storeid = null;
        String eventType = null;
        // List<Item> response = api.aggregateRecent(storeid, eventType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns top products
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aggregateTopTest() throws ApiException {
        String storeid = null;
        String eventType = null;
        // List<Item> response = api.aggregateTop(storeid, eventType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve authentication token using password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authStoreTest() throws ApiException {
        Store store = null;
        // Store response = api.authStore(store);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all events
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllEventsTest() throws ApiException {
        String storeid = null;
        // Event response = api.deleteAllEvents(storeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all items
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllItemsTest() throws ApiException {
        String storeid = null;
        // Item response = api.deleteAllItems(storeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete existing item
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemTest() throws ApiException {
        String storeid = null;
        String itemid = null;
        // Item response = api.deleteItem(storeid, itemid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return list of recommended items
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recommendInterestingTest() throws ApiException {
        String storeid = null;
        String userid = null;
        Double count = null;
        // List<Item> response = api.recommendInteresting(storeid, userid, count);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return list of recommended items
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recommendSimilarTest() throws ApiException {
        String storeid = null;
        String userid = null;
        String itemid = null;
        Double count = null;
        // List<Item> response = api.recommendSimilar(storeid, userid, itemid, count);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Register new event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerEventTest() throws ApiException {
        String storeid = null;
        Event event = null;
        // Event response = api.registerEvent(storeid, event);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Register new item
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerItemTest() throws ApiException {
        String storeid = null;
        Item item = null;
        // Item response = api.registerItem(storeid, item);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Register new Store
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerStoreTest() throws ApiException {
        Store store = null;
        // Store response = api.registerStore(store);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get recent events
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveEventsTest() throws ApiException {
        String storeid = null;
        // List<Event> response = api.retrieveEvents(storeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get recent items
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveItemsTest() throws ApiException {
        String storeid = null;
        // List<Item> response = api.retrieveItems(storeid);

        // TODO: test validations
    }
    
}
