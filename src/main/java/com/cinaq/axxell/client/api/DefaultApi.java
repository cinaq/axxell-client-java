/*
 * axxell-api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.cinaq.axxell.client.api;

import com.cinaq.axxell.client.ApiCallback;
import com.cinaq.axxell.client.ApiClient;
import com.cinaq.axxell.client.ApiException;
import com.cinaq.axxell.client.ApiResponse;
import com.cinaq.axxell.client.Configuration;
import com.cinaq.axxell.client.Pair;
import com.cinaq.axxell.client.ProgressRequestBody;
import com.cinaq.axxell.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.cinaq.axxell.client.model.DataPoint;
import com.cinaq.axxell.client.model.ErrorResponse;
import com.cinaq.axxell.client.model.Item;
import com.cinaq.axxell.client.model.Store;
import com.cinaq.axxell.client.model.Event;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for aggregateCountEvents */
    private com.squareup.okhttp.Call aggregateCountEventsCall(String storeid, String eventType, String dataPeriod, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'storeid' is set
        if (storeid == null) {
            throw new ApiException("Missing the required parameter 'storeid' when calling aggregateCountEvents(Async)");
        }
        
        // verify the required parameter 'eventType' is set
        if (eventType == null) {
            throw new ApiException("Missing the required parameter 'eventType' when calling aggregateCountEvents(Async)");
        }
        
        // verify the required parameter 'dataPeriod' is set
        if (dataPeriod == null) {
            throw new ApiException("Missing the required parameter 'dataPeriod' when calling aggregateCountEvents(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/aggregates/countevents/{eventType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "eventType" + "\\}", apiClient.escapeString(eventType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeid", storeid));
        if (dataPeriod != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "dataPeriod", dataPeriod));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Return list of counts per event
     * @param storeid Store identifier (required)
     * @param eventType Valid values purchase, view or recommend (required)
     * @param dataPeriod Valid values are last7days, last30days, today, yesterday (required)
     * @return DataPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataPoint aggregateCountEvents(String storeid, String eventType, String dataPeriod) throws ApiException {
        ApiResponse<DataPoint> resp = aggregateCountEventsWithHttpInfo(storeid, eventType, dataPeriod);
        return resp.getData();
    }

    /**
     * 
     * Return list of counts per event
     * @param storeid Store identifier (required)
     * @param eventType Valid values purchase, view or recommend (required)
     * @param dataPeriod Valid values are last7days, last30days, today, yesterday (required)
     * @return ApiResponse&lt;DataPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataPoint> aggregateCountEventsWithHttpInfo(String storeid, String eventType, String dataPeriod) throws ApiException {
        com.squareup.okhttp.Call call = aggregateCountEventsCall(storeid, eventType, dataPeriod, null, null);
        Type localVarReturnType = new TypeToken<DataPoint>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return list of counts per event
     * @param storeid Store identifier (required)
     * @param eventType Valid values purchase, view or recommend (required)
     * @param dataPeriod Valid values are last7days, last30days, today, yesterday (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aggregateCountEventsAsync(String storeid, String eventType, String dataPeriod, final ApiCallback<DataPoint> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aggregateCountEventsCall(storeid, eventType, dataPeriod, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataPoint>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aggregateEffective */
    private com.squareup.okhttp.Call aggregateEffectiveCall(String storeid, String eventType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'storeid' is set
        if (storeid == null) {
            throw new ApiException("Missing the required parameter 'storeid' when calling aggregateEffective(Async)");
        }
        
        // verify the required parameter 'eventType' is set
        if (eventType == null) {
            throw new ApiException("Missing the required parameter 'eventType' when calling aggregateEffective(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/aggregates/effective/{eventType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "eventType" + "\\}", apiClient.escapeString(eventType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeid", storeid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Return list of aggregated data points correlated with recommendationa and eventType
     * @param storeid Store identifier (required)
     * @param eventType Valid values purchase, view or recommend (required)
     * @return List&lt;DataPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DataPoint> aggregateEffective(String storeid, String eventType) throws ApiException {
        ApiResponse<List<DataPoint>> resp = aggregateEffectiveWithHttpInfo(storeid, eventType);
        return resp.getData();
    }

    /**
     * 
     * Return list of aggregated data points correlated with recommendationa and eventType
     * @param storeid Store identifier (required)
     * @param eventType Valid values purchase, view or recommend (required)
     * @return ApiResponse&lt;List&lt;DataPoint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DataPoint>> aggregateEffectiveWithHttpInfo(String storeid, String eventType) throws ApiException {
        com.squareup.okhttp.Call call = aggregateEffectiveCall(storeid, eventType, null, null);
        Type localVarReturnType = new TypeToken<List<DataPoint>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return list of aggregated data points correlated with recommendationa and eventType
     * @param storeid Store identifier (required)
     * @param eventType Valid values purchase, view or recommend (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aggregateEffectiveAsync(String storeid, String eventType, final ApiCallback<List<DataPoint>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aggregateEffectiveCall(storeid, eventType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DataPoint>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aggregateEvents */
    private com.squareup.okhttp.Call aggregateEventsCall(String storeid, String eventType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'storeid' is set
        if (storeid == null) {
            throw new ApiException("Missing the required parameter 'storeid' when calling aggregateEvents(Async)");
        }
        
        // verify the required parameter 'eventType' is set
        if (eventType == null) {
            throw new ApiException("Missing the required parameter 'eventType' when calling aggregateEvents(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/aggregates/events/{eventType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "eventType" + "\\}", apiClient.escapeString(eventType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeid", storeid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Return list of aggregated data points
     * @param storeid Store identifier (required)
     * @param eventType Valid values purchase, view or recommend (required)
     * @return List&lt;DataPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DataPoint> aggregateEvents(String storeid, String eventType) throws ApiException {
        ApiResponse<List<DataPoint>> resp = aggregateEventsWithHttpInfo(storeid, eventType);
        return resp.getData();
    }

    /**
     * 
     * Return list of aggregated data points
     * @param storeid Store identifier (required)
     * @param eventType Valid values purchase, view or recommend (required)
     * @return ApiResponse&lt;List&lt;DataPoint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DataPoint>> aggregateEventsWithHttpInfo(String storeid, String eventType) throws ApiException {
        com.squareup.okhttp.Call call = aggregateEventsCall(storeid, eventType, null, null);
        Type localVarReturnType = new TypeToken<List<DataPoint>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return list of aggregated data points
     * @param storeid Store identifier (required)
     * @param eventType Valid values purchase, view or recommend (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aggregateEventsAsync(String storeid, String eventType, final ApiCallback<List<DataPoint>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aggregateEventsCall(storeid, eventType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DataPoint>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aggregateRecent */
    private com.squareup.okhttp.Call aggregateRecentCall(String storeid, String eventType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'storeid' is set
        if (storeid == null) {
            throw new ApiException("Missing the required parameter 'storeid' when calling aggregateRecent(Async)");
        }
        
        // verify the required parameter 'eventType' is set
        if (eventType == null) {
            throw new ApiException("Missing the required parameter 'eventType' when calling aggregateRecent(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/aggregates/recent/{eventType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "eventType" + "\\}", apiClient.escapeString(eventType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeid", storeid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Returns recent products
     * @param storeid Store identifier (required)
     * @param eventType Valid values purchase, view or recommend (required)
     * @return List&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Item> aggregateRecent(String storeid, String eventType) throws ApiException {
        ApiResponse<List<Item>> resp = aggregateRecentWithHttpInfo(storeid, eventType);
        return resp.getData();
    }

    /**
     * 
     * Returns recent products
     * @param storeid Store identifier (required)
     * @param eventType Valid values purchase, view or recommend (required)
     * @return ApiResponse&lt;List&lt;Item&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Item>> aggregateRecentWithHttpInfo(String storeid, String eventType) throws ApiException {
        com.squareup.okhttp.Call call = aggregateRecentCall(storeid, eventType, null, null);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns recent products
     * @param storeid Store identifier (required)
     * @param eventType Valid values purchase, view or recommend (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aggregateRecentAsync(String storeid, String eventType, final ApiCallback<List<Item>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aggregateRecentCall(storeid, eventType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aggregateTop */
    private com.squareup.okhttp.Call aggregateTopCall(String storeid, String eventType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'storeid' is set
        if (storeid == null) {
            throw new ApiException("Missing the required parameter 'storeid' when calling aggregateTop(Async)");
        }
        
        // verify the required parameter 'eventType' is set
        if (eventType == null) {
            throw new ApiException("Missing the required parameter 'eventType' when calling aggregateTop(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/aggregates/top/{eventType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "eventType" + "\\}", apiClient.escapeString(eventType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeid", storeid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Returns top products
     * @param storeid Store identifier (required)
     * @param eventType Valid values purchase, view or recommend (required)
     * @return List&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Item> aggregateTop(String storeid, String eventType) throws ApiException {
        ApiResponse<List<Item>> resp = aggregateTopWithHttpInfo(storeid, eventType);
        return resp.getData();
    }

    /**
     * 
     * Returns top products
     * @param storeid Store identifier (required)
     * @param eventType Valid values purchase, view or recommend (required)
     * @return ApiResponse&lt;List&lt;Item&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Item>> aggregateTopWithHttpInfo(String storeid, String eventType) throws ApiException {
        com.squareup.okhttp.Call call = aggregateTopCall(storeid, eventType, null, null);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns top products
     * @param storeid Store identifier (required)
     * @param eventType Valid values purchase, view or recommend (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aggregateTopAsync(String storeid, String eventType, final ApiCallback<List<Item>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aggregateTopCall(storeid, eventType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for authStore */
    private com.squareup.okhttp.Call authStoreCall(Store store, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = store;
        
        // verify the required parameter 'store' is set
        if (store == null) {
            throw new ApiException("Missing the required parameter 'store' when calling authStore(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/auth".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Retrieve authentication token using password
     * @param store Store (required)
     * @return Store
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Store authStore(Store store) throws ApiException {
        ApiResponse<Store> resp = authStoreWithHttpInfo(store);
        return resp.getData();
    }

    /**
     * 
     * Retrieve authentication token using password
     * @param store Store (required)
     * @return ApiResponse&lt;Store&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Store> authStoreWithHttpInfo(Store store) throws ApiException {
        com.squareup.okhttp.Call call = authStoreCall(store, null, null);
        Type localVarReturnType = new TypeToken<Store>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve authentication token using password
     * @param store Store (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authStoreAsync(Store store, final ApiCallback<Store> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authStoreCall(store, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Store>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteAllEvents */
    private com.squareup.okhttp.Call deleteAllEventsCall(String storeid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'storeid' is set
        if (storeid == null) {
            throw new ApiException("Missing the required parameter 'storeid' when calling deleteAllEvents(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/events".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeid", storeid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Delete all events
     * @param storeid Store identifier (required)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Event deleteAllEvents(String storeid) throws ApiException {
        ApiResponse<Event> resp = deleteAllEventsWithHttpInfo(storeid);
        return resp.getData();
    }

    /**
     * 
     * Delete all events
     * @param storeid Store identifier (required)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Event> deleteAllEventsWithHttpInfo(String storeid) throws ApiException {
        com.squareup.okhttp.Call call = deleteAllEventsCall(storeid, null, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete all events
     * @param storeid Store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAllEventsAsync(String storeid, final ApiCallback<Event> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllEventsCall(storeid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteAllItems */
    private com.squareup.okhttp.Call deleteAllItemsCall(String storeid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'storeid' is set
        if (storeid == null) {
            throw new ApiException("Missing the required parameter 'storeid' when calling deleteAllItems(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/items".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeid", storeid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Delete all items
     * @param storeid Store identifier (required)
     * @return Item
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Item deleteAllItems(String storeid) throws ApiException {
        ApiResponse<Item> resp = deleteAllItemsWithHttpInfo(storeid);
        return resp.getData();
    }

    /**
     * 
     * Delete all items
     * @param storeid Store identifier (required)
     * @return ApiResponse&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Item> deleteAllItemsWithHttpInfo(String storeid) throws ApiException {
        com.squareup.okhttp.Call call = deleteAllItemsCall(storeid, null, null);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete all items
     * @param storeid Store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAllItemsAsync(String storeid, final ApiCallback<Item> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllItemsCall(storeid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteItem */
    private com.squareup.okhttp.Call deleteItemCall(String storeid, String itemid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'storeid' is set
        if (storeid == null) {
            throw new ApiException("Missing the required parameter 'storeid' when calling deleteItem(Async)");
        }
        
        // verify the required parameter 'itemid' is set
        if (itemid == null) {
            throw new ApiException("Missing the required parameter 'itemid' when calling deleteItem(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/items/{itemid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "itemid" + "\\}", apiClient.escapeString(itemid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeid", storeid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Delete existing item
     * @param storeid Store identifier (required)
     * @param itemid Item identifier (required)
     * @return Item
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Item deleteItem(String storeid, String itemid) throws ApiException {
        ApiResponse<Item> resp = deleteItemWithHttpInfo(storeid, itemid);
        return resp.getData();
    }

    /**
     * 
     * Delete existing item
     * @param storeid Store identifier (required)
     * @param itemid Item identifier (required)
     * @return ApiResponse&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Item> deleteItemWithHttpInfo(String storeid, String itemid) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemCall(storeid, itemid, null, null);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete existing item
     * @param storeid Store identifier (required)
     * @param itemid Item identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemAsync(String storeid, String itemid, final ApiCallback<Item> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemCall(storeid, itemid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for recommendInteresting */
    private com.squareup.okhttp.Call recommendInterestingCall(String storeid, String userid, Double count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'storeid' is set
        if (storeid == null) {
            throw new ApiException("Missing the required parameter 'storeid' when calling recommendInteresting(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling recommendInteresting(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/recommendations/interesting".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeid", storeid));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (userid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userid", userid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Return list of recommended items
     * @param storeid Store identifier (required)
     * @param userid Interesting items for visitor (required)
     * @param count Return exactly this amount of suggestions. Maximum value is 50, default is 5. (optional)
     * @return List&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Item> recommendInteresting(String storeid, String userid, Double count) throws ApiException {
        ApiResponse<List<Item>> resp = recommendInterestingWithHttpInfo(storeid, userid, count);
        return resp.getData();
    }

    /**
     * 
     * Return list of recommended items
     * @param storeid Store identifier (required)
     * @param userid Interesting items for visitor (required)
     * @param count Return exactly this amount of suggestions. Maximum value is 50, default is 5. (optional)
     * @return ApiResponse&lt;List&lt;Item&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Item>> recommendInterestingWithHttpInfo(String storeid, String userid, Double count) throws ApiException {
        com.squareup.okhttp.Call call = recommendInterestingCall(storeid, userid, count, null, null);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return list of recommended items
     * @param storeid Store identifier (required)
     * @param userid Interesting items for visitor (required)
     * @param count Return exactly this amount of suggestions. Maximum value is 50, default is 5. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recommendInterestingAsync(String storeid, String userid, Double count, final ApiCallback<List<Item>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recommendInterestingCall(storeid, userid, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for recommendSimilar */
    private com.squareup.okhttp.Call recommendSimilarCall(String storeid, String userid, String itemid, Double count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'storeid' is set
        if (storeid == null) {
            throw new ApiException("Missing the required parameter 'storeid' when calling recommendSimilar(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling recommendSimilar(Async)");
        }
        
        // verify the required parameter 'itemid' is set
        if (itemid == null) {
            throw new ApiException("Missing the required parameter 'itemid' when calling recommendSimilar(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/recommendations/similar".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeid", storeid));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (userid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userid", userid));
        if (itemid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "itemid", itemid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Return list of recommended items
     * @param storeid Store identifier (required)
     * @param userid User requesting the recommendation (required)
     * @param itemid Similar items bought by others (required)
     * @param count Return exactly this amount of suggestions. Maximum value is 50, default is 5. (optional)
     * @return List&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Item> recommendSimilar(String storeid, String userid, String itemid, Double count) throws ApiException {
        ApiResponse<List<Item>> resp = recommendSimilarWithHttpInfo(storeid, userid, itemid, count);
        return resp.getData();
    }

    /**
     * 
     * Return list of recommended items
     * @param storeid Store identifier (required)
     * @param userid User requesting the recommendation (required)
     * @param itemid Similar items bought by others (required)
     * @param count Return exactly this amount of suggestions. Maximum value is 50, default is 5. (optional)
     * @return ApiResponse&lt;List&lt;Item&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Item>> recommendSimilarWithHttpInfo(String storeid, String userid, String itemid, Double count) throws ApiException {
        com.squareup.okhttp.Call call = recommendSimilarCall(storeid, userid, itemid, count, null, null);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return list of recommended items
     * @param storeid Store identifier (required)
     * @param userid User requesting the recommendation (required)
     * @param itemid Similar items bought by others (required)
     * @param count Return exactly this amount of suggestions. Maximum value is 50, default is 5. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recommendSimilarAsync(String storeid, String userid, String itemid, Double count, final ApiCallback<List<Item>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recommendSimilarCall(storeid, userid, itemid, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for registerEvent */
    private com.squareup.okhttp.Call registerEventCall(String storeid, Event event, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = event;
        
        // verify the required parameter 'storeid' is set
        if (storeid == null) {
            throw new ApiException("Missing the required parameter 'storeid' when calling registerEvent(Async)");
        }
        
        // verify the required parameter 'event' is set
        if (event == null) {
            throw new ApiException("Missing the required parameter 'event' when calling registerEvent(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/events".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeid", storeid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Register new event
     * @param storeid Store identifier (required)
     * @param event Single event to register (required)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Event registerEvent(String storeid, Event event) throws ApiException {
        ApiResponse<Event> resp = registerEventWithHttpInfo(storeid, event);
        return resp.getData();
    }

    /**
     * 
     * Register new event
     * @param storeid Store identifier (required)
     * @param event Single event to register (required)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Event> registerEventWithHttpInfo(String storeid, Event event) throws ApiException {
        com.squareup.okhttp.Call call = registerEventCall(storeid, event, null, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Register new event
     * @param storeid Store identifier (required)
     * @param event Single event to register (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerEventAsync(String storeid, Event event, final ApiCallback<Event> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerEventCall(storeid, event, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for registerItem */
    private com.squareup.okhttp.Call registerItemCall(String storeid, Item item, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = item;
        
        // verify the required parameter 'storeid' is set
        if (storeid == null) {
            throw new ApiException("Missing the required parameter 'storeid' when calling registerItem(Async)");
        }
        
        // verify the required parameter 'item' is set
        if (item == null) {
            throw new ApiException("Missing the required parameter 'item' when calling registerItem(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/items".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeid", storeid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Register new item
     * @param storeid Store identifier (required)
     * @param item Single item to register (required)
     * @return Item
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Item registerItem(String storeid, Item item) throws ApiException {
        ApiResponse<Item> resp = registerItemWithHttpInfo(storeid, item);
        return resp.getData();
    }

    /**
     * 
     * Register new item
     * @param storeid Store identifier (required)
     * @param item Single item to register (required)
     * @return ApiResponse&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Item> registerItemWithHttpInfo(String storeid, Item item) throws ApiException {
        com.squareup.okhttp.Call call = registerItemCall(storeid, item, null, null);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Register new item
     * @param storeid Store identifier (required)
     * @param item Single item to register (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerItemAsync(String storeid, Item item, final ApiCallback<Item> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerItemCall(storeid, item, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for registerStore */
    private com.squareup.okhttp.Call registerStoreCall(Store store, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = store;
        
        // verify the required parameter 'store' is set
        if (store == null) {
            throw new ApiException("Missing the required parameter 'store' when calling registerStore(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/store".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Register new Store
     * @param store Store (required)
     * @return Store
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Store registerStore(Store store) throws ApiException {
        ApiResponse<Store> resp = registerStoreWithHttpInfo(store);
        return resp.getData();
    }

    /**
     * 
     * Register new Store
     * @param store Store (required)
     * @return ApiResponse&lt;Store&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Store> registerStoreWithHttpInfo(Store store) throws ApiException {
        com.squareup.okhttp.Call call = registerStoreCall(store, null, null);
        Type localVarReturnType = new TypeToken<Store>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Register new Store
     * @param store Store (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerStoreAsync(Store store, final ApiCallback<Store> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerStoreCall(store, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Store>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveEvents */
    private com.squareup.okhttp.Call retrieveEventsCall(String storeid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'storeid' is set
        if (storeid == null) {
            throw new ApiException("Missing the required parameter 'storeid' when calling retrieveEvents(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/events".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "storeid" + "\\}", apiClient.escapeString(storeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Get recent events
     * @param storeid Store identifier (required)
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Event> retrieveEvents(String storeid) throws ApiException {
        ApiResponse<List<Event>> resp = retrieveEventsWithHttpInfo(storeid);
        return resp.getData();
    }

    /**
     * 
     * Get recent events
     * @param storeid Store identifier (required)
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Event>> retrieveEventsWithHttpInfo(String storeid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveEventsCall(storeid, null, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get recent events
     * @param storeid Store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveEventsAsync(String storeid, final ApiCallback<List<Event>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveEventsCall(storeid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveItems */
    private com.squareup.okhttp.Call retrieveItemsCall(String storeid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'storeid' is set
        if (storeid == null) {
            throw new ApiException("Missing the required parameter 'storeid' when calling retrieveItems(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/items".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (storeid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storeid", storeid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Get recent items
     * @param storeid Store identifier (required)
     * @return List&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Item> retrieveItems(String storeid) throws ApiException {
        ApiResponse<List<Item>> resp = retrieveItemsWithHttpInfo(storeid);
        return resp.getData();
    }

    /**
     * 
     * Get recent items
     * @param storeid Store identifier (required)
     * @return ApiResponse&lt;List&lt;Item&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Item>> retrieveItemsWithHttpInfo(String storeid) throws ApiException {
        com.squareup.okhttp.Call call = retrieveItemsCall(storeid, null, null);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get recent items
     * @param storeid Store identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveItemsAsync(String storeid, final ApiCallback<List<Item>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveItemsCall(storeid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
